{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","api","base","key","state","searchedCity","city","country","desc","temp","handleInput","bind","handleSubmit","getDate","e","this","setState","target","value","console","log","fetch","then","res","json","result","sys","weather","description","main","catch","err","d","Date","day","getDay","date","month","getMonth","year","getFullYear","prevProps","className","type","onChange","placeholder","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"iPA4HeA,G,wDAxHb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,IAAM,CACTC,KAAM,kDACNC,IAAK,oCAEP,EAAKC,MAAQ,CACXC,aAAc,GACdC,KAAM,GACNC,QAAS,GACTC,KAAM,GACNC,KAAM,IAER,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,QAAU,EAAKA,QAAQF,KAAb,gBAfE,E,wDAkBPG,GACVC,KAAKC,SAAS,CAAEX,aAAcS,EAAEG,OAAOC,U,mCAG5BJ,GAAI,IAAD,OACkB,KAA5BC,KAAKX,MAAMC,eAEfc,QAAQC,IAAIL,KAAKX,MAAMC,cACvBU,KAAKC,SAAS,CACZV,KAAMS,KAAKX,MAAMC,eAGnBgB,MACEN,KAAKd,IAAIC,KACP,MACAa,KAAKX,MAAMC,aACX,uBACAU,KAAKd,IAAIE,KAEVmB,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACL,EAAKT,SAAS,CACZT,QAASkB,EAAOC,IAAInB,QACpBC,KAAMiB,EAAOE,QAAQ,GAAGC,YACxBnB,KAAMgB,EAAOI,KAAKpB,UAGrBqB,OAAM,SAACC,GAAD,OAASZ,QAAQC,IAAIW,MAC9BhB,KAAKC,SAAS,CACZX,aAAc,Q,gCAKhB,IAAI2B,EAAI,IAAIC,KAwBRC,EATO,CACT,SACA,SACA,UACA,YACA,WACA,SACA,YAEaF,EAAEG,UACbC,EAAOJ,EAAEnB,UACTwB,EAzBS,CACX,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAaiBL,EAAEM,YACjBC,EAAOP,EAAEQ,cACb,MAAM,GAAN,OAAUN,EAAV,YAAiBE,EAAjB,YAAyBC,EAAzB,YAAkCE,K,wCAGlBE,GAAY,IAAD,OAC3BpB,MAAMN,KAAKd,IAAIC,KAAO,mCAAqCa,KAAKd,IAAIE,KACjEmB,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACL,EAAKT,SAAS,CACZV,KAAM,YACNC,QAASkB,EAAOC,IAAInB,QACpBC,KAAMiB,EAAOE,QAAQ,GAAGC,YACxBnB,KAAMgB,EAAOI,KAAKpB,UAGrBqB,OAAM,SAACC,GAAD,OAASZ,QAAQC,IAAIW,Q,+BAI9B,OACE,yBAAKW,UAAU,OACb,yBAAKA,UAAU,cACb,2BACEC,KAAK,OACLzB,MAAOH,KAAKX,MAAMC,aAClBuC,SAAU7B,KAAKL,YACfmC,YAAY,yBAEd,4BAAQC,QAAS/B,KAAKH,cAAtB,WAEF,yBAAK8B,UAAU,gBACb,6BAAM3B,KAAKX,MAAME,KAAO,KAAOS,KAAKX,MAAMG,SAC1C,6BAAMQ,KAAKF,WACX,yBAAK6B,UAAU,QAAQ3B,KAAKX,MAAMK,KAAlC,SACA,6BAAMM,KAAKX,MAAMI,Y,GAlHTuC,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdhC,OAAM,SAAAiC,GACL5C,QAAQ4C,MAAMA,EAAMC,a","file":"static/js/main.3f207991.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.api = {\n      base: \"https://api.openweathermap.org/data/2.5/weather\",\n      key: \"b8c50b6a913ea332d90277f074e3584c\",\n    };\n    this.state = {\n      searchedCity: \"\",\n      city: \"\",\n      country: \"\",\n      desc: \"\",\n      temp: \"\",\n    };\n    this.handleInput = this.handleInput.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.getDate = this.getDate.bind(this);\n  }\n\n  handleInput(e) {\n    this.setState({ searchedCity: e.target.value });\n  }\n\n  handleSubmit(e) {\n    if (this.state.searchedCity === \"\") return;\n    //log the city for debugging\n    console.log(this.state.searchedCity);\n    this.setState({\n      city: this.state.searchedCity,\n    });\n    //fetch the weather for that city\n    fetch(\n      this.api.base +\n        \"?q=\" +\n        this.state.searchedCity +\n        \"&units=metric&appid=\" +\n        this.api.key\n    )\n      .then((res) => res.json())\n      .then((result) => {\n        this.setState({\n          country: result.sys.country,\n          desc: result.weather[0].description,\n          temp: result.main.temp,\n        });\n      })\n      .catch((err) => console.log(err));\n    this.setState({\n      searchedCity: \"\",\n    });\n  }\n\n  getDate() {\n    let d = new Date();\n    let months = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n    let days = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ];\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n    return `${day} ${date} ${month} ${year}`;\n  }\n\n  componentDidMount(prevProps) {\n    fetch(this.api.base + \"?q=Bangalore&units=metric&appid=\" + this.api.key)\n      .then((res) => res.json())\n      .then((result) => {\n        this.setState({\n          city: \"Bangalore\",\n          country: result.sys.country,\n          desc: result.weather[0].description,\n          temp: result.main.temp,\n        });\n      })\n      .catch((err) => console.log(err));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <input\n            type=\"text\"\n            value={this.state.searchedCity}\n            onChange={this.handleInput}\n            placeholder=\"Enter a city name...\"\n          ></input>\n          <button onClick={this.handleSubmit}>Submit</button>\n        </div>\n        <div className=\"weather-info\">\n          <div>{this.state.city + \", \" + this.state.country}</div>\n          <div>{this.getDate()}</div>\n          <div className=\"temp\">{this.state.temp}Â°C</div>\n          <div>{this.state.desc}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}